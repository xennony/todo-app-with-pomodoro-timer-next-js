import Head from "next/head";
import Image from "next/image";
import { React, useState, useEffect } from "react";

import Pomidoro from "/components/Pomidoro";
import Tasks from "/components/Tasks";

export default function Home() {
  const initialData = [];

  const [dataMain, setData] = useState([]);

  useEffect(() => {
    const items = JSON.parse(localStorage.getItem("data"));
    if (items) {
      setData(items);
    } else {
      setData(initialData);
    }
  }, []);

  const [taskName, setTaskName] = useState("");

  const [activeTab, setActiveTab] = useState("Focus");

  const addTask = (taskName) => {
    const newTask = { id: Date.now(), name: taskName, is_checked: false };
    const updatedData = [...dataMain, newTask];
    setData(updatedData);
    localStorage.setItem("data", JSON.stringify(updatedData));
  };

  const toggleCheck = async (id) => {
    const { error } = await supabase
      .from("data")
      .update({
        is_checked: !dataMain.find((task) => task.id === id).is_checked,
      })
      .eq("id", id);

    if (error) {
      console.log("Error updating task:", error.message);
    } else {
      setData((prev) =>
        prev.map((task) =>
          task.id === id ? { ...task, is_checked: !task.is_checked } : task
        )
      );
    }
  };

  const deleteTask = async (id) => {
    const { error } = await supabase.from("data").delete().eq("id", id);

    if (error) {
      console.log("Error deleting task:", error.message);
    } else {
      localStorage.removeItem("data", JSON.stringify(updatedData));
    }
  };

  return (
    <>
      <Head>
        <title>To Do app with Pomidoro</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="max-w-[800px] px-4 mx-auto">
        <div className="flex justify-center mt-[50px]">
          <div className="tabs gap-1">
            <div
              className={`text-[16px] tab tab-pill ${
                activeTab === "Focus" ? "tab-active font-medium" : ""
              }`}
              onClick={() => setActiveTab("Focus")}
            >
              Focus
            </div>
            <div
              className={`text-[16px] tab tab-pill ${
                activeTab === "Break" ? "tab-active font-medium" : ""
              }`}
              onClick={() => setActiveTab("Break")}
            >
              Break
            </div>
          </div>
        </div>

        <div className="flex justify-center mt-[40px] mb-[30px]">
          <Image src="/assets/home.png" width={200} height={200} alt="home" />
        </div>

        <Pomidoro activeTab={activeTab} setActiveTab={setActiveTab} />

        <div className="flex sticky top-0 bg-[#fcfcfc] pt-[20px] z-10">
          <input
            className="input input-block mb-[20px] "
            placeholder="Enter a new task"
            value={taskName}
            onChange={(event) => setTaskName(event.target.value)}
            onKeyDown={(event) =>
              event.key === "Enter" ? addTask(taskName.trim()) : ""
            }
          />
          <button
            onClick={() => addTask(taskName.trim())}
            className="btn px-3 ml-[10px] bg-black text-white rounded-3xl"
          >
            <svg
              width="15"
              height="15"
              viewBox="0 0 15 15"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M6.18194 4.18185C6.35767 4.00611 6.6426 4.00611 6.81833 4.18185L9.81833 7.18185C9.90272 7.26624 9.95013 7.3807 9.95013 7.50005C9.95013 7.6194 9.90272 7.73386 9.81833 7.81825L6.81833 10.8182C6.6426 10.994 6.35767 10.994 6.18194 10.8182C6.0062 10.6425 6.0062 10.3576 6.18194 10.1819L8.86374 7.50005L6.18194 4.81825C6.0062 4.64251 6.0062 4.35759 6.18194 4.18185Z"
                fill="currentColor"
                fillRule="evenodd"
                clipRule="evenodd"
              ></path>
            </svg>
          </button>
        </div>
        <Tasks
          data={dataMain}
          setData={setData}
          toggleCheck={toggleCheck}
          deleteTask={deleteTask}
          totalCount={dataMain.length}
        />
      </main>
    </>
  );
}
